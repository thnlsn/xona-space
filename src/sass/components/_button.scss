.btn {
  &, // This selection is only for <button/> elements, since they do not come with :link & :visited states, we have to target itself
    // link and visited are pseudo-classes, so we write the style for these specific states of the anchor element
    &:link,
    &:visited {
    text-decoration: none;
    color: var(--color-white);
    border: 1px solid var(--color-white);
  }

  &:hover {
    transform: translateY(
      -3px
    ); // negtative (-) because postive would mean going away from the Y axis into the element more (so down), negative means up and out of the element
    box-shadow: 0 1rem 2rem rgba(#000, 0.2); // x-offset y-offset blur color

    // ::after styles will occur when btn is hovered
    &::after {
      transform: scaleX(1.4) scaleY(1.6); // Since this is gonna be for an animation, we have to set a transition on the initial state
      opacity: 0;
    }
  }

  &:active,
  &:focus {
    transform: translateY(
      -1px
    ); // Clicking (active) will seem to make it go down, but in reality its going up, just based on the parent. Since hover makes it go 3px and clicking only goes 1px, it goes from 3px to 1px when clicked.
    box-shadow: 0 0.5rem 1rem rgba(#000, 0.2);

    // This is for <button/> elements, as they come with a blue outline on focus
    outline: none;
  }

  // ::active is a pseudo-element, it is not in the html markup, but it does exist on the page
  &::after {
    content: '';
    display: inline-block;
    height: 100%; // 100% of the height of .btn
    width: 100%; // 100% of the height of .btn
    border-radius: 5px; // Mimic the dimensions of the original button

    position: absolute;
    top: 0; // Coordinates defined based on the nearest parent with position: relative (so .btn)
    left: 0;
    z-index: -1; // Set behind the real button so it does not cover the text

    transition: all 0.4s;
  }
}
